import 'package:dexcom_flutter/src/utils/formats.dart';

import 'package:dexcom_flutter/src/data/dexcomData.dart';

///An enumerator for the unit of measurement of the egv value.
enum EGVValueUnit{
  ///Egv value is expressed as mg/dl.
  MG_DL,

  ///Egv value is expressed as mmol/l.
  MMOL_L
}// EGVValueUnit

///An enumerator for the unit of measurement of the egv rate of change value.
enum EGVRateUnit{
  ///Egv rate of change value is expressed as mg/dl/min.
  MG_DL_MIN,

  ///Egv rate of change value is expressed as mmol/l/min.
  MMOL_L_MIN
}// EGVRateUnit

///An enumerator for the status of the egv value.
enum EGVStatus{
  ///Egv value is between 40 and 400 mg/dl.
  OK,

  ///Egv value is less than 40 mg/dl.
  LOW,

  ///Egv value is higher than 400 mmol/l.
  HIGH,
}// EGVStatus

///An enumerator for the displayed rate of change arrow.
enum Trend{

  /// Trend rate is between +3 and +8
  DOUBLE_UP,

  /// Trend rate is between +2 and +3
  SINGLE_UP,

  /// Trend rate is between +1 and +2
  FORTYFIVE_UP,

  /// Trend rate is between -1 and +1
  FLAT,
  
  /// Trend rate is between -8 and +3
  DOUBLE_DOWN,

  /// Trend rate is between -3 and -2
  SINGLE_DOWN,

  /// Trend rate is between -2 and -1
  FORTYFIVE_DOWN,
  
  /// Trend rate is blank
  NONE,

  /// The algorithm decides that it is not reasonable to compute the trend arrow
  NOT_COMPUTABLE,

  /// The computed filtered rate is not within the range for assigning arrows
  RATE_OUT_OF_RANGE,

  /// The trend is null
  NULL,
  
}//Trend

/// [DexcomEGVData] is a class implementing the data model of the
/// user EGV data.
class DexcomEGVData implements DexcomData {

  /// The unit of measurement of the [value] field.
  final EGVValueUnit egvValueUnit;

  /// The unit of measurement of the [trendRate] field.
  final EGVRateUnit egvRateUnit;

  /// The time according to the system clock at which egv was recorded; nominally UTC.
  final DateTime systemTime;

  /// The time displayed on the receiving device when egv was recorded.
  final DateTime displayTime;

  /// The egv presented on receiving device in realtime
  final double? realtimeValue;

  /// Egv presented retrospectively on receiving device after smoothing; G6 devices only.
  final double? smoothedValue;
  
  /// The egv value. 
  /// The G6 generation of sensors and transmitters introduced the concept of retrospective data smoothing to estimated glucose values. 
  /// This smoothing incorporates three consecutive EGVs to produce a clearer, more readable trace for the user. 
  /// Because three consecutive EGVs are not always available—for example, at the beginning or end of a sensor session—some EGVs cannot be smoothed.
  /// In these cases, the [realtimeValue] will be populated with a number, but the [smoothedValue] will be null.
  /// The rules for the [value] field are:
  /// - If [smoothedValue] is not null, [value] is equal to [smoothedValue]. 
  /// - If [smoothedValue] is null, [value] is equal to [realtimeValue]. 
  /// Due to how data is uploaded and processed, some records that initially have a null [smoothedValue] may later have this field populated, with the [value] field also changing per the rules above.
  /// For EGVs generated by G4 and G5 devices, the [smoothedValue] field will always return null as these systems do not have retrospective data smoothing.
  final double? value;

  /// Explanation of EGV record; used when the [value] field is outside the measuring range.
  final EGVStatus egvStatus;

  /// General trend of EGV value movement; corresponds to [trendRate] field.
  final Trend? trend;

  /// Rate at which glucose value is moving up or down
  final double? trendRate;


  /// Default [DexcomEGVData] constructor.
  DexcomEGVData({
    required this.egvValueUnit,
    required this.egvRateUnit,
    required this.systemTime,
    required this.displayTime,
    this.realtimeValue,
    this.smoothedValue,
    this.value,
    required this.egvStatus,
    this.trend,
    this.trendRate,
  });

  /// Generates a [DexcomEGVData] obtained from a json.
  factory DexcomEGVData.fromJsonWithUnits({required String unit, required String rateUnit, required Map<String, dynamic> json}) {

    final EGVValueUnit egvValueUnit;
    if(unit == "mg/dL"){
      egvValueUnit = EGVValueUnit.MG_DL;
    } else {
      egvValueUnit = EGVValueUnit.MMOL_L;
    }// if

    final EGVRateUnit egvRateUnit;
    if(rateUnit == "mg/dL/min"){
      egvRateUnit = EGVRateUnit.MG_DL_MIN;
    }else{
      egvRateUnit = EGVRateUnit.MMOL_L_MIN;
    }//if

    final EGVStatus egvStatus;
    if(json['status'] == "low"){
      egvStatus = EGVStatus.LOW;
    }else if(json['status'] == "high"){
      egvStatus = EGVStatus.HIGH;
    }else{
      egvStatus = EGVStatus.OK;
    }//if

    final Trend trend;
    if(json['trend'] == "doubleUp"){
      trend = Trend.DOUBLE_UP;
    }else if(json['trend'] == "singleUp"){
      trend = Trend.SINGLE_UP;
    }else if(json['trend'] == "fortyFiveUp"){
      trend = Trend.FORTYFIVE_UP;
    }else if(json['trend'] == "flat"){
      trend = Trend.FLAT;
    }else if(json['trend'] == "fortyFiveDown"){
      trend = Trend.FORTYFIVE_DOWN;
    }else if(json['trend'] == "singleDown"){
      trend = Trend.SINGLE_DOWN;
    }else if(json['trend'] == "doubleDown"){
      trend = Trend.DOUBLE_DOWN;
    }else if(json['trend'] == "notComputable"){
      trend = Trend.NOT_COMPUTABLE;
    }else if(json['trend'] == "rateOutOfRange"){
      trend = Trend.RATE_OUT_OF_RANGE;
    }else if(json['trend'] == "none"){
      trend = Trend.NONE;
    }else{
      trend = Trend.NULL;
    }//if

    return DexcomEGVData(
      egvValueUnit: egvValueUnit,
      egvRateUnit: egvRateUnit,
      systemTime: Formats.fullDateFormat.parse(json['systemTime']),
      displayTime: Formats.fullDateFormat.parse(json['displayTime']),
      smoothedValue: json['smoothedValue'] == null ? null : double.parse(json['smoothedValue'].toString()),
      realtimeValue: json['realtimeValue'] == null ? null : double.parse(json['realtimeValue'].toString()),
      value: json['value'] == null ? null : double.parse(json['value'].toString()),
      egvStatus: egvStatus,
      trend: trend,
      trendRate: json['trendRate'] == null ? null : json['trendRate']
    );
  } // fromJson

  @override
  String toString() {
    
    return (StringBuffer('DexcomEGVData(')
          ..write('egvValueUnit: $egvValueUnit, ')
          ..write('egvRateUnit: $egvRateUnit, ')
          ..write('systemTime: $systemTime, ')
          ..write('displayTime: $displayTime, ')
          ..write('smoothedValue: $smoothedValue, ')
          ..write('realtimeValue: $realtimeValue, ')
          ..write('value: $value, ')
          ..write('egvStatus: $egvStatus, ')
          ..write('trend: $trend, ')
          ..write('trendRate: $trendRate ')
          ..write(')'))
        .toString();
  } // toString

  @override
  Map<String, dynamic> toJson<T extends DexcomData>() {

    final String egvValueUnitStr;
    if(egvValueUnit == EGVValueUnit.MG_DL){
      egvValueUnitStr = "mg/dL";
    } else {
      egvValueUnitStr = "mmol/L";
    }// if

    final String egvRateUnitStr;
    if(egvRateUnit == EGVRateUnit.MG_DL_MIN){
      egvRateUnitStr = "mg/dL/min";
    }else{
      egvRateUnitStr = "mmol/L/min";
    }//if

    final String? egvStatusStr;
    if(egvStatus == EGVStatus.LOW){
      egvStatusStr = "low";
    }else if(egvStatus == EGVStatus.HIGH){
      egvStatusStr = "high";
    }else{
      egvStatusStr = null;
    }//if

    final String? trendStr;
    if(trend == Trend.DOUBLE_UP){
      trendStr = "doubleUp";
    }else if(trend == Trend.SINGLE_UP){
      trendStr = "singleUp";
    }else if(trend == Trend.FORTYFIVE_UP){
      trendStr = "fortyFiveUp";
    }else if(trend == Trend.FLAT){
      trendStr = "flat";
    }else if(trend == Trend.FORTYFIVE_DOWN){
      trendStr = "fortyFiveDown";
    }else if(trend == Trend.SINGLE_DOWN){
      trendStr = "singleDown";
    }else if(trend == Trend.DOUBLE_DOWN){
      trendStr = "doubleDown";
    }else if(trend == Trend.NOT_COMPUTABLE){
      trendStr = "notComputable";
    }else if(trend == Trend.RATE_OUT_OF_RANGE){
      trendStr = "rateOutOfRange";
    }else if(trend ==  Trend.NONE){
      trendStr = "none";
    }else{
      trendStr = null;
    }//if

    return <String, dynamic>{
      'unit': egvValueUnitStr,
      'rateUnit' : egvRateUnitStr,
      'systemTime' : Formats.fullDateFormat.format(systemTime),
      'displayTime' : Formats.fullDateFormat.format(displayTime),
      'smoothedValue' : smoothedValue,
      'realtimeValue' : realtimeValue,
      'value' : value,
      'status' : egvStatusStr,
      'trend' : trendStr,
      'trendRate' : trendRate,
    };
  } // toJson

} // DexcomEGVData
